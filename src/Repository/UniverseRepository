<?php // path: src/Repository/UniverseRepository.php

require __DIR__ . '/../Class/factory.dbconnector.php';

class UniverseRepository
{
    private $dbConnector;
    private $dbType;

    public function __construct()
    {
        // Récupérez le type de base de données à partir de la configuration
        $this->dbType = $GLOBALS['dbinfos']['database_type'];
        
        // Créez le connecteur de base de données approprié
        $this->dbConnector = DBConnectorFactory::getConnector($this->dbType);
    }

    public function create(Universe $universe)
    {
        // Insertion de l'univers dans la base de données
        $db = $this->dbConnector->getConnection();
        $sql = "INSERT INTO universe (name, description, image, id_user) VALUES (?, ?, ?, ?)";
        $params = [
            $universe->getName(),
            $universe->getDescription(),
            $universe->getImage(),
            $universe->getUserId()
        ];
        $success = $this->dbConnector->execute($sql, $params);

        if ($success) {
            // Récupération de l'ID généré pour le nouvel univers
            $id = $db->lastInsertId();

            // Création et retour de l'instance Universe correspondante
            return new Universe($id, $universe->getName(), $universe->getDescription(), $universe->getImage(), $universe->getUserId());
        } else {
            throw new Exception("Erreur lors de la création de l'univers");
        }
    }

    public function getById($id)
    {
        // Récupération de l'univers par ID depuis la base de données
        $db = $this->dbConnector->getConnection();
        $sql = "SELECT * FROM universe WHERE id = ?";
        $params = [$id];
        $result = $this->dbConnector->select($sql, $params);

        if (count($result) === 1) {
            $universeData = $result[0];
            return new Universe($universeData['id'], $universeData['name'], $universeData['description'], $universeData['image'], $universeData['id_user']);
        } else {
            return null;
        }
    }

    public function update(Universe $universe)
    {
        // Mettre à jour l'univers dans la base de données
        $db = $this->dbConnector->getConnection();
        $sql = "UPDATE universe SET name = ?, description = ?, image = ?, id_user = ? WHERE id = ?";
        $params = [
            $universe->getName(),
            $universe->getDescription(),
            $universe->getImage(),
            $universe->getUserId(),
            $universe->getId()
        ];
        $success = $this->dbConnector->execute($sql, $params);

        if (!$success) {
            throw new Exception("Erreur lors de la mise à jour de l'univers");
        }
    }

    public function delete($id)
    {
        // Supprimer l'univers de la base de données par ID
        $db = $this->dbConnector->getConnection();
        $sql = "DELETE FROM universe WHERE id = ?";
        $params = [$id];
        $success = $this->dbConnector->execute($sql, $params);

        if (!$success) {
            throw new Exception("Erreur lors de la suppression de l'univers");
        }
    }

    public function getAll()
    {
        // Récupérer tous les univers depuis la base de données
        $db = $this->dbConnector->getConnection();
        $sql = "SELECT * FROM universe";
        $result = $this->dbConnector->select($sql);

        $universes = [];
        foreach ($result as $universeData) {
            $universes[] = new Universe($universeData['id'], $universeData['name'], $universeData['description'], $universeData['image'], $universeData['id_user']);
        }

        return $universes;
    }
}